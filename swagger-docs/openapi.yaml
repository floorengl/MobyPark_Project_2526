openapi: 3.0.0
info:
  title: MobyPark API
  version: 1.0.0
servers:
  - url: http://localhost:8000
paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { type: string }
                password: { type: string }
                name: { type: string }
              required: [username, password]
      responses:
        '201':
          description: User created
        '200':
          description: Username already taken

  /login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { type: string }
                password: { type: string }
              required: [username, password]
      responses:
        '200':
          description: User logged in
        '401':
          description: Invalid credentials

  /logout:
    get:
      summary: Logout user
      parameters:
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      responses:
        '200':
          description: User logged out

  /profile:
    get:
      summary: Get user profile
      parameters:
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      responses:
        '200':
          description: User profile
    put:
      summary: Update user profile
      parameters:
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password: { type: string }
                name: { type: string }
      responses:
        '200':
          description: User updated

  /parking-lots:
    get:
      summary: List parking lots
      responses:
        '200':
          description: Parking lots list
    post:
      summary: Create parking lot (ADMIN only)
      parameters:
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: Parking lot created

  /parking-lots/{id}:
    get:
      summary: Get parking lot details
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Parking lot details
    put:
      summary: Update parking lot (ADMIN only)
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Parking lot updated
    delete:
      summary: Delete parking lot (ADMIN only)
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Parking lot deleted

  /parking-lots/{id}/sessions:
    get:
      summary: List sessions for parking lot
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Sessions list
    post:
      summary: Start session
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                licenseplate: { type: string }
              required: [licenseplate]
      responses:
        '200':
          description: Session started

  /parking-lots/{id}/sessions/{sid}/stop:
    post:
      summary: Stop session
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: sid
          in: path
          required: true
          schema: { type: string }
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                licenseplate: { type: string }
              required: [licenseplate]
      responses:
        '200':
          description: Session stopped

  /reservations:
    get:
      summary: List reservations
      parameters:
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Reservations list
    post:
      summary: Create reservation
      parameters:
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                licenseplate: { type: string }
                startdate: { type: string }
                enddate: { type: string }
                parkinglot: { type: string }
              required: [licenseplate, startdate, enddate, parkinglot]
      responses:
        '201':
          description: Reservation created

  /reservations/{id}:
    get:
      summary: Get reservation
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Reservation details
    put:
      summary: Update reservation
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Reservation updated
    delete:
      summary: Delete reservation
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Reservation deleted

  /vehicles:
    get:
      summary: List vehicles
      parameters:
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Vehicles list
    post:
      summary: Add vehicle
      parameters:
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                license_plate: { type: string }
              required: [name, license_plate]
      responses:
        '201':
          description: Vehicle added

  /vehicles/{id}:
    get:
      summary: Get vehicle
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Vehicle details
    put:
      summary: Update vehicle
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
      responses:
        '200':
          description: Vehicle updated
    delete:
      summary: Delete vehicle
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Vehicle deleted

  /payments:
    get:
      summary: List payments
      parameters:
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Payments list
    post:
      summary: Add payment
      parameters:
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                transaction: { type: string }
                amount: { type: number }
      responses:
        '201':
          description: Payment added

  /payments/{id}:
    get:
      summary: Get payment (ADMIN only)
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Payment details
    put:
      summary: Update payment
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                t_data: { type: object }
                validation: { type: string }
      responses:
        '200':
          description: Payment updated

  /payments/{id}/refund:
    post:
      summary: Refund payment (ADMIN only)
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount: { type: number }
      responses:
        '201':
          description: Payment refunded

  /billing:
    get:
      summary: Get billing info
      parameters:
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Billing info

  /billing/{username}:
    get:
      summary: Get billing info for user (ADMIN only)
      parameters:
        - name: username
          in: path
          required: true
          schema: { type: string }
        - name: Authorization
          in: header
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Billing info for user