openapi: 3.0.0
info:
  title: MobyPark API
  description: API documentation for the MobyPark parking management system.
  version: 1.0.0
servers:
  - url: http://localhost:8000
paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                name:
                  type: string
      responses:
        '201':
          description: User created
        '200':
          description: Username already taken
        '400':
          description: Missing credentials

  /login:
    post:
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  session_token:
                    type: string
        '401':
          description: Invalid credentials
        '400':
          description: Missing credentials

  /parking-lots:
    post:
      summary: Create a new parking lot (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                location:
                  type: string
                capacity:
                  type: integer
      responses:
        '201':
          description: Parking lot created
        '403':
          description: Access denied

  /vehicles:
    post:
      summary: Add a new vehicle
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                license_plate:
                  type: string
      responses:
        '201':
          description: Vehicle added
        '401':
          description: Require field missing
        '403':
          description: Vehicle already exists

  /vehicles/{vehicleId}:
    delete:
      summary: Delete a vehicle
      security:
        - bearerAuth: []
      parameters:
        - name: vehicleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Vehicle deleted
        '401':
          description: Unauthorized
        '404':
          description: Vehicle not found

  /reservations:
    post:
      summary: Create a new reservation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                licenseplate:
                  type: string
                startdate:
                  type: string
                  format: date-time
                enddate:
                  type: string
                  format: date-time
                parkinglot:
                  type: string
      responses:
        '201':
          description: Reservation created
        '401':
          description: Require field missing
        '404':
          description: Parking lot not found

  /profile:
    get:
      summary: Get user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved
        '401':
          description: Unauthorized

  /logout:
    post:
      summary: Log out a user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User logged out
        '400':
          description: Invalid session token

security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT